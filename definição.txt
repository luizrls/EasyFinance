1 - Resumo do projeto
	
	Desenvolver uma aplicação web que seja capaz de se conectar a um banco de dados e 
	executar operações de CRUD (Criar, Buscar, Atualizar, Deletar).
	
	Tema:
	
		Criar uma aplicação simples para gerenciamento de despesas domésticas
	
2 - Requisitos principais

	- Utilizar arquitetura MVC
	- Utilizar um padão de projeto (Alem do MVC)
	- Ser uma aplicação WEB
	- Ter persistência de dados
	- Cronograma de desenvolvimento
	- Diagramas de classes
	
3 - Tecnologias utilizadas

	Front-end: HTML, CSS, Javascript, VueJS
	Back-end: C#, .Net Core 2.2
	Persistencia: EntityFramework
	SGBD: MySql ou SQL Server
	Versionamento: GitHub
	Publicação: A definir

4 - Casos de uso

	- Usuario entra na tela principal e visualiza o saldo das despesas e receitas.
	- Usuario entra na tela principal e visualiza todas as despesas e receitas incluidas.
	- Usuario entra na tela principal e consegue incluir novas despesas / receitas.
	- Usuario entra na tela principal e consegue selecionar e excluir as depesas / receitas.

5 - Definição de entidades

	- Usuarios
		Propriedades: id, nome, login, senha, status
		Metodos: buscarUsuario(String login)
		
	- Transacoes
		Propriedades: id, nome, valor, status, competencia, UsuarioID
		Metodos: addTransacao(Transacao transacao), excTransacao(Transacao transacao), buscarTodasTransacao(String Login)

6 - Testes unitários

	A definir
	
7 - Implantação

	A definir

8 - Etapas de desenvolvimento

	1 - Criar o projeto front-end - ok
	2 - Criar o design das telas
	3 - Programar as funcionalidades em memória
	
	4 - Cria o projeto Back-end
	5 - Criar o banco de dados
	6 - Criar as tabelas no banco de dados
	7 - Criar as entidades no backend
	8 - Programar o back-end
	9 - Testar o back-end
	
	10 - Integrar o front-end com o back-end
	11 - Fim


{"Chave":"Valor", "Chave2":1, "Obj":{"aaa":"aaa"}, "array": ["aaa","bbb","ccc"]}

Model
View
Conjtroller

HCController

Verbo HTTP : Get, Post, Put, delete


C = Criar = Post
R = Ler = Get
U = Editar = Put
D = Deletar = Delete
